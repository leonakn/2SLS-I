load(file_main)
df_GRS_main <- df_causal_main_effects
df_GRS_main$Y_trait <- str_remove_all(df_GRS_main$Y_trait, pattern = " \\(auto\\)| \\(l\\)")
to_rename <- c(b_uni_main = "X_Y_causal_Estimate", se_uni_main = "X_Y_causal_SE",
pval_uni_main = "X_Y_causal_pval")
df_GRS_main <- dplyr::rename(df_GRS_main, all_of(to_rename))
nrow(df_GRS_main)
df_GRS_main <- df_GRS_main[df_GRS_main$X_trait %in% all_expos, ]
nrow(df_GRS_main)
df_GRS_main$Y_ID <- as.numeric(df_GRS_main$Y_ID)
df_GRS_main$X_ID <- as.numeric(df_GRS_main$X_ID)
df_main_plot$Y_ID <- as.numeric(df_main_plot$Y_ID)
df_main_plot$X_ID <- as.numeric(df_main_plot$X_ID)
nrow(df_GRS_main)
df_GRS_main <- merge(df_GRS_main, df_IDs[,c("X_ID", "X_trait_presentation",
"X_trait_paper")],
by = "X_ID")
nrow(df_GRS_main)
df_GRS_main <- merge(df_GRS_main, outcome_overview[,c("Y_ID", "Y_trait_presentation")], by = "Y_ID")
nrow(df_GRS_main)
nrow(df_main_plot)
df_main_plot <- full_join(df_main_plot, df_GRS_main[c("Y_ID", "X_ID",
"X_trait", "X_trait_paper",
"X_trait_presentation",
"Y_trait",
"Y_trait_presentation",
"b_uni_main",
"se_uni_main",
"pval_uni_main")])
nrow(df_main_plot)
# get confidence rating for main effect
load(file_main_overview)
df_main_plot <- left_join(df_main_plot, main_overview[,c("Y_ID", "X_ID", "point_for_main")])
df_main_plot$sig_uni <- ifelse(df_main_plot$pval_uni_main < threshold_main,
yes = "sig",
no = "ns")
df_main_plot$unicol <- paste0(df_main_plot$Y_trait, "_", df_main_plot$X_trait)
pairs_to_set_to_0 <- c("FIS_Educ",
paste0(sort(unique(df_main_plot$Y_trait)), "_",
sort(unique(df_main_plot$Y_trait))),
"FEV1_FVC", "LDL_Chol", "LDL_HDL", "LDL_TG", "LDL_LipA")
df_main_plot[df_main_plot$unicol %in% pairs_to_set_to_0, c("b_uni_main")] <- 0
df_main_plot[df_main_plot$unicol %in% pairs_to_set_to_0, c("pval_uni_main")] <- 1
df_main_plot$dir <- sign(df_main_plot$b_uni_main)
file_interactions <- list.files(path_to_univariable, pattern = "022_df_interactions", full.names = T)
load(file_interactions)
summary(as.factor(df_interaction$tier))
nrow(df_interaction)
df_interaction <- df_interaction[df_interaction$tier > 0, ]
nrow(df_interaction)
df_interaction <- df_interaction[df_interaction$X_ID != df_interaction$Y_ID, ]
nrow(df_interaction)
df_interaction <- df_interaction[!(df_interaction$X_ID == 845 &
df_interaction$E_ID == 189),]
nrow(df_interaction) #146
df_interaction <- df_interaction[!(df_interaction$X_trait == "HDL" &
df_interaction$Y_trait == "LDL"),]
nrow(df_interaction) #146
df_interaction <- df_interaction[!(df_interaction$X_trait == "Chol" &
df_interaction$Y_trait == "LDL"),]
nrow(df_interaction) #145
df_interaction <- df_interaction[!(df_interaction$X_trait == "TG" &
df_interaction$Y_trait == "LDL"),]
nrow(df_interaction) #145
df_interaction <- df_interaction[!(df_interaction$X_trait == "LipA" &
df_interaction$Y_trait == "LDL"),]
nrow(df_interaction) #144
df_interaction <- df_interaction[!(df_interaction$X_trait == "Educ" &
df_interaction$Y_trait == "FIS"),]
nrow(df_interaction) #143
summary(as.factor(df_interaction$tier))
df_interaction <- df_interaction[df_interaction$E_ID %in% c(189, 1070, 21022,
40047, 24003), ]
summary(as.factor(df_interaction$tier))
nrow(df_interaction)
# # detect settings where overcorrection may occure (sig effect of X on E and corrected)
pot_overcorr <- df_interaction[df_interaction$pval_X_on_E < 0.05 &
df_interaction$raw_cor_GRS == "cor",
c("X_ID", "Y_ID", "E_ID", "tier")]
load(paste0(path_to_univariable, "014_causal_corrected_interaction.Rdata"))
df_interaction_GRS <- merge(df_causal_interaction, pot_overcorr,
by = c("X_ID", "Y_ID", "E_ID"))
for(i in 1:nrow(df_interaction_GRS)){
t_stat <- (df_interaction_GRS$XxE_causal_Estimate[i] -
df_interaction_GRS$corrected_XxE_estimate[i])/
sqrt(df_interaction_GRS$XxE_causal_SE[i]^2 +
df_interaction_GRS$corrected_XxE_SE[i]^2)
df <- df_interaction_GRS$degrees_of_freedom[i]
pval <- 2 * pt(-abs(t_stat), df)
df_interaction_GRS$p_diff_raw_cor[i] <- pval
}
# set these tier to 0
tier_to_0 <- df_interaction_GRS[df_interaction_GRS$p_diff_raw_cor < 0.05 |
sign(df_interaction_GRS$XxE_causal_Estimate) !=
sign(df_interaction_GRS$corrected_XxE_estimate),
c("X_ID", "Y_ID", "E_ID",
"X_trait", "Y_trait", "E_trait")]
# little detour to assess interactions where the effect of X on E
# is not at least 2 times weaker than the effect of E on X
df_interaction$ratio_X_on_E_E_on_X <- df_interaction$b_X_on_E/df_interaction$b_E_on_X
df_interaction$se_ratio_X_on_E_E_on_X <- df_interaction$se_X_on_E/df_interaction$b_E_on_X
df_interaction$LCI_ratio_X_on_E_E_on_X <-
df_interaction$ratio_X_on_E_E_on_X - 1.96 * df_interaction$se_ratio_X_on_E_E_on_X
df_interaction$UCI_ratio_X_on_E_E_on_X <-
df_interaction$ratio_X_on_E_E_on_X + 1.96 * df_interaction$se_ratio_X_on_E_E_on_X
df_interaction$strong_X_on_E <- ifelse((df_interaction$LCI_ratio_X_on_E_E_on_X > 0.5 &
df_interaction$UCI_ratio_X_on_E_E_on_X > 0.5)|
(df_interaction$UCI_ratio_X_on_E_E_on_X < -0.5 &
df_interaction$LCI_ratio_X_on_E_E_on_X < -0.5),
yes = TRUE,
no = FALSE)
df_interaction$strong_X_on_E <- as.factor(df_interaction$strong_X_on_E)
df_interaction[df_interaction$strong_X_on_E == TRUE, c("X_trait", "Y_trait", "E_trait")]
df_interaction <- df_interaction[,c("X_trait", "Y_trait", "E_trait",
"X_ID", "Y_ID", "E_ID",
"estimate_GRS", "se_GRS", "tval_GRS", "pval_GRS",
"estimate_PRS", "se_PRS", "tval_PRS", "pval_PRS",
"both_sig", "only_GRS_sig", "only_PRS_sig",
"effect_agrees", "any_sig", "tier", "raw_cor_GRS", "strong_X_on_E")]
df_interaction$Y_trait <- str_remove_all(df_interaction$Y_trait, pattern = " \\(auto\\)| \\(l\\)")
head(df_main_plot)
df_interaction <- merge(df_interaction, df_main_plot[,c("X_ID", "Y_ID", "b_uni_main")])
# get genetic correlations to have meaningful order of exposures
load(file_LDSC)
S <- ldsc.covstruct$S
n_traits <- dim(S)[1]  # Assuming S is square, this gives the number of traits
rg_mat <- matrix(0, n_traits, n_traits)  # Initialize a matrix for genetic correlations
# now calculate the correlations by dividing the genetic covariance
# by the sqrt of the product of both genetic variances
for (i in 1:n_traits) {
for (j in 1:n_traits) {
cov_g <- S[i, j]
rg_mat[i, j] <- cov_g / sqrt(S[i, i] * S[j, j])
}
}
colnames(rg_mat) <- colnames(ldsc.covstruct$S)
rownames(rg_mat) <- colnames(ldsc.covstruct$S)
# perform clustering
hc <- hclust(as.dist(1 - abs(rg_mat)))
order <- hc$order
# Reorder the correlation matrix
rg_mat_ordered <- rg_mat[order, order]
ordered_X_traits <- colnames(rg_mat_ordered)
ordered_X_traits <- str_replace_all(ordered_X_traits,
pattern = "GammaGLT",
replacement = "Gamma GLT" )
ordered_X_traits <- str_replace_all(ordered_X_traits,
pattern = "SodiuminUrine",
replacement = "Sodium in Urine")
ordered_X_traits <- str_replace_all(ordered_X_traits,
pattern = "LipA",
replacement = "Lip A")
ordered_X_traits <- ordered_X_traits[ordered_X_traits %in% df_main_plot$X_trait]
any(!ordered_X_traits %in% df_main_plot$X_trait)
any(!df_main_plot$X_trait %in% ordered_X_traits)# very good, we've got them all!
ordered_X_traits <- ordered_X_traits[ordered_X_traits %in% df_interaction$X_trait]
ordered_X_traits_paper <- df_IDs[match(ordered_X_traits, df_IDs$X_trait),
"X_trait_paper"]
ordered_X_traits_presentation <- df_IDs[match(ordered_X_traits, df_IDs$X_trait),
"X_trait_presentation"]
df_main_plot <- df_main_plot[df_main_plot$X_trait %in% unique(df_interaction$X_trait), ]
df_main_plot$X_trait <- factor(df_main_plot$X_trait,
levels = ordered_X_traits)
df_main_plot$X_trait_paper <- factor(df_main_plot$X_trait_paper,
levels = ordered_X_traits_paper)
df_main_plot$X_trait_presentation <- factor(df_main_plot$X_trait_presentation,
levels = ordered_X_traits_presentation)
df_main_plot$Y_trait <- as.factor(df_main_plot$Y_trait)
df_main_plot$Y_trait_presentation <- as.factor(df_main_plot$Y_trait_presentation)
df_main_plot$sig <- ifelse(is.na(df_main_plot$point_for_main),
yes = ifelse(df_main_plot$pval_uni_main < threshold_main,
yes = "sig",
no = "ns"),
no = ifelse(df_main_plot$point_for_main == 0,
yes = "ns",
no = "sig"))
df_main_plot$sig <- as.factor(df_main_plot$sig)
df_main_plot$dir <- as.factor(df_main_plot$dir)
df_main_plot$not_assessed <- NA
df_main_plot[df_main_plot$Y_trait == "LDL" &
df_main_plot$X_trait %in% c("Lip A", "Chol", "HDL", "TG"),
"not_assessed"] <- "not assessed"
df_main_plot[df_main_plot$Y_trait == "FIS" &
df_main_plot$X_trait == "Educ",
"not_assessed"] <- "not assessed"
df_main_plot[df_main_plot$X_ID == df_main_plot$Y_ID,
"not_assessed"] <- "not assessed"
df_main_plot[!is.na(df_main_plot$not_assessed),]
nrow(df_interaction)
df_interaction$X_ID <- as.numeric(df_interaction$X_ID)
df_interaction$Y_ID <- as.numeric(df_interaction$Y_ID)
df_interaction <- left_join(df_interaction,
df_main_plot[,c("X_ID", "Y_ID",
"X_trait_presentation",
"X_trait_paper",
"Y_trait_presentation",
"b_uni_main", "sig", "dir", "not_assessed")])
nrow(df_interaction)
to_rename <- c(sig_main = "sig", dir_main = "dir",
raw_cor = "raw_cor_GRS")
df_interaction <- dplyr::rename(df_interaction, all_of(to_rename))
df_interaction$tier <- ifelse(df_interaction$sig_main == "sig",
yes = (df_interaction$tier + 1),
no = df_interaction$tier)
df_interaction$main_interact_agree <- ifelse(sign(df_interaction$b_uni_main) ==
sign(df_interaction$estimate_GRS),
yes = "same",
no = "opposite")
nrow(df_interaction)
interaction_parameters <- unique(df_interaction$E_trait)
# only plot main effect if significant!
df_main_plot$b <- ifelse(df_main_plot$sig == "sig",
yes = df_main_plot$b_uni_main,
no = 0)
df_main_plot$dir <- sign(df_main_plot$b)
df_main_plot$dir <- as.factor(df_main_plot$dir)
df_interaction[df_interaction$strong_X_on_E == "TRUE",]
df_interaction[df_interaction$strong_X_on_E == "TRUE", c("X_trait", "E_trait", "Y_trait")]
library(lubridate)
library(tictoc)
library(magrittr)
library(readr)
library(stringr)
library(ggplot2)
Date <- today() %>% str_remove_all(pattern = "^20|-")
path_sim_sett <- paste0("/Users/lknusel/Documents/05_strati_polyMR/",
"07_Alice_Man/06_scripts_to_share/test_outcomes/",
Date, "/")
pathRFile <- paste0("/Users/lknusel/Documents/",
"05_strati_polyMR/07_Alice_Man/",
"06_scripts_to_share/Perform_simulations.R")
path_out <- paste0(paste0("/Users/lknusel/Documents/05_strati_polyMR/",
"07_Alice_Man/06_scripts_to_share/test_outcomes/",
Date, "/"))
if(!dir.exists(path_out)){
dir.create(path_out, recursive = T)
}
library(lubridate)
library(tictoc)
library(magrittr)
library(readr)
library(stringr)
library(ggplot2)
Date <- today() %>% str_remove_all(pattern = "^20|-")
path_sim_sett <- paste0("/Users/lknusel/Documents/05_strati_polyMR/",
"07_Alice_Man/06_scripts_to_share/test_outcomes/",
Date, "/")
pathRFile <- paste0("/Users/lknusel/Documents/",
"05_strati_polyMR/07_Alice_Man/",
"06_scripts_to_share/Perform_simulations.R")
path_out <- paste0(paste0("/Users/lknusel/Documents/05_strati_polyMR/",
"07_Alice_Man/06_scripts_to_share/test_outcomes/",
Date, "/"))
if(!dir.exists(path_out)){
dir.create(path_out, recursive = T)
}
# Create Simulation Settings
sim_sett <- data.frame(nSample = rep(10^4, times = 27),
E_on_X = rep(c(0, 0.1, 0.3), each = 9),
E_on_Y = rep(0, 27),
X_on_Y = rep(0.2, 27),
GRSxX_on_Y = rep(c(0, 0.1, 0.3), each = 3, times = 3),
hX = rep(sqrt(0.1), 27),
GRSxE_on_X = rep(0, 27),
E2_on_X = rep(0, 27),
E2_on_Y = rep(0, 27),
X2_on_Y = rep(c(0, 0.05, 0.15), times = 9),
U_on_X = rep(0.3, 27),
U_on_Y = rep(0.5, 27),
U2_on_Y = rep(0.1, 27),
Szenario = c(1:27)
)
write.csv(sim_sett, paste0(path_sim_sett, "00_", Date, "_settings_source_of_bias.csv"))
n_repet <- 500
#### Access to functions
source("/Users/lknusel/Documents/05_strati_polyMR/07_Alice_Man/06_scripts_to_share/Functions_v2.R")
df <- list()
#### Access to functions
source("/Users/lknusel/Documents/05_strati_polyMR/07_Alice_Man/06_scripts_to_share/Functions.R")
df <- list()
for (i in 1:nrow(sim_sett)) {
df[[i]] <- data.frame(
E_on_X = rep(sim_sett[i, "E_on_X"], n_repet),
E_on_Y = sim_sett[i, "E_on_Y"],
X_on_Y = sim_sett[i, "X_on_Y"],
GRSxX_on_Y = sim_sett[i, "GRSxX_on_Y"],
hX = sim_sett[i, "hX"],
GRSxE_on_X = sim_sett[i, "GRSxE_on_X"],
E2_on_X = sim_sett[i, "E2_on_X"],
E2_on_Y = sim_sett[i, "E2_on_Y"],
X2_on_Y = sim_sett[i, "X2_on_Y"],
U_on_X = sim_sett[i, "U_on_X"],
U_on_Y = sim_sett[i, "U_on_Y"],
U2_on_Y = sim_sett[i, "U2_on_Y"],
Seed = seq(from = 1, to = n_repet, by = 1),
LEVEL = sim_sett[i, "Szenario"],
n_sample = sim_sett[i, "nSample"]
)
}
for (i in 1:length(df)) {
df[[i]] <- obtain_maximum_parameters(df[[i]], nObs = 5,
path_out = path_out, n_repet = n_repet)
print(paste("Analysed szenario ", unique(df[[i]]$LEVEL)))
}
save(df, file = paste0(path_out, "DFSim.Rdata"))
# Create Model Formulae
ModelFormulae <- data.frame(Model_no = 1,
Formula = as.character("Y ~ GRS + E + GRS2 + E2 + E:GRS"))
for (i in 1:nrow(sim_sett)){
ModellingXY(df = df[[i]], n_repet = n_repet,
ModelFormulae = ModelFormulae, path_out = path_out)
}
n_repet <- 20
#### Access to functions
source("/Users/lknusel/Documents/05_strati_polyMR/07_Alice_Man/06_scripts_to_share/Functions.R")
df <- list()
for (i in 1:nrow(sim_sett)) {
df[[i]] <- data.frame(
E_on_X = rep(sim_sett[i, "E_on_X"], n_repet),
E_on_Y = sim_sett[i, "E_on_Y"],
X_on_Y = sim_sett[i, "X_on_Y"],
GRSxX_on_Y = sim_sett[i, "GRSxX_on_Y"],
hX = sim_sett[i, "hX"],
GRSxE_on_X = sim_sett[i, "GRSxE_on_X"],
E2_on_X = sim_sett[i, "E2_on_X"],
E2_on_Y = sim_sett[i, "E2_on_Y"],
X2_on_Y = sim_sett[i, "X2_on_Y"],
U_on_X = sim_sett[i, "U_on_X"],
U_on_Y = sim_sett[i, "U_on_Y"],
U2_on_Y = sim_sett[i, "U2_on_Y"],
Seed = seq(from = 1, to = n_repet, by = 1),
LEVEL = sim_sett[i, "Szenario"],
n_sample = sim_sett[i, "nSample"]
)
}
for (i in 1:length(df)) {
df[[i]] <- obtain_maximum_parameters(df[[i]], nObs = 5,
path_out = path_out, n_repet = n_repet)
print(paste("Analysed szenario ", unique(df[[i]]$LEVEL)))
}
save(df, file = paste0(path_out, "DFSim.Rdata"))
# Create Model Formulae
ModelFormulae <- data.frame(Model_no = 1,
Formula = as.character("Y ~ GRS + E + GRS2 + E2 + E:GRS"))
for (i in 1:nrow(sim_sett)){
ModellingXY(df = df[[i]], n_repet = n_repet,
ModelFormulae = ModelFormulae, path_out = path_out)
}
# An example of postprocessing:
files_m1 <- list.files(path_out, pattern = "Model_1_Data.csv", full.names = T)
data_m1 <- lapply(files_m1, read.csv)
df_m1 <- do.call(rbind, data_m1)
df_m1$deviation_true_GRSxX_on_Y <- df_m1$ExGRS_Estimate - df_m1$GRSxX_on_Y
median_deviation_GRSxX_on_Y <- aggregate(deviation_true_GRSxX_on_Y ~ LEVEL, df_m1, median)
df_m1 <- merge(df_m1, median_deviation_GRSxX_on_Y, by = "LEVEL", all = T)
df <- df_m1[ ,c("E_on_X", "X2_on_Y", "GRSxX_on_Y", "ExGRS_Estimate", "deviation_true_GRSxX_on_Y.y", "LEVEL")]
df$E_on_X <- factor(df$E_on_X,
levels = c(0.3, 0.1, 0),
labels = paste0("beta[E %->% X]", ": ", c(0.3, 0.1, 0)))
df$X2_on_Y <- factor(df$X2_on_Y,
labels = paste0("beta[X^2 %->% Y]", ": ", levels(factor(df$X2_on_Y))))
df$GRSxX_on_Y <- factor(df$GRSxX_on_Y)
bias_plot <- ggplot(data = df,
mapping = aes(x = GRSxX_on_Y, y = ExGRS_Estimate)) +
geom_violin(aes(fill = deviation_true_GRSxX_on_Y.y))+
geom_boxplot(color = "lightgrey", mapping = aes(fill = deviation_true_GRSxX_on_Y.y))+
scale_fill_viridis_c(begin = 0.2, end = 0.7)+
geom_hline(yintercept = 0, linetype = "dashed", color = "red")+
geom_hline(yintercept = 0.1, linetype = "dashed", color = "red")+
geom_hline(yintercept = 0.3, linetype = "dashed", color = "red")+
ylab(label = expression(hat(beta)[E~"*"~GRS[X] %->% Y]))+
xlab(label = expression(beta[E~"*"~GRS[X] %->% Y]))+
theme_light(base_size = 12) +
facet_grid(E_on_X ~ X2_on_Y,
labeller = label_parsed)
bias_plot
set.seed(1505)
setwd("/Users/lknusel/Documents/05_strati_polyMR/08_public_github/2SLS-I/applied_analysis/results/")
# assume X_ID = 37, Y_ID = 11, and E_ID = 1204
n_sample <- 100000
G <- rnorm(n = n_sample) #the GRS
set.seed(1505)
setwd("/Users/lknusel/Documents/05_strati_polyMR/08_public_github/2SLS-I/applied_analysis/results/")
# assume X_ID = 37, Y_ID = 11, and E_ID = 1204
n_sample <- 100000
b_G_X <- 0.2
b_GxE_X <- 0.01
b_E_X <- 0.2
b_X_Y <- 0.2
b_X2_Y <- 0.05 #preetty strong!
b_XxE_Y <- 0.02
E <- rnorm(n = n_sample) # the environmental variable
G <- rnorm(n = n_sample) #the GRS
df_PGS <- data.frame(IID = c(1:n_sample),
PGS_37_SUM = G)
library(readr)
library(R.utils)
write_delim(x = df_PGS, file = "../data/aggregated_scores.txt", delim = "\t")
gzip("../aggregated_scores.txt")
gzip("../data/aggregated_scores.txt")
gzip("../data/aggregated_scores.txt")
set.seed(1505)
setwd("/Users/lknusel/Documents/05_strati_polyMR/08_public_github/2SLS-I/applied_analysis/data/")
# assume X_ID = 37, Y_ID = 11, and E_ID = 1204
n_sample <- 100000
b_G_X <- 0.2
b_GxE_X <- 0.01
b_E_X <- 0.2
b_X_Y <- 0.2
b_X2_Y <- 0.05 #preetty strong!
b_XxE_Y <- 0.02
E <- rnorm(n = n_sample) # the environmental variable
G <- rnorm(n = n_sample) #the GRS
# define X (=the exposure)
#random noise in X, variance fixed so that var(X) will be ~ 1
eps_X <- rnorm(n = n_sample) * c(sqrt(1-var(b_G_X * G +
b_GxE_X * G * E +
b_E_X * E)))
X <- b_G_X * G +
b_GxE_X * G * E +
b_E_X * E +
eps_X
pheno_df <- data.frame(eid = c(1:n_sample),
'37-0.0' = X,
'37_z' = X,
'37_IRNT' = X,
"37_IRNT_c" = X,
check.names = F)
save(x = pheno_df, file = "004_Exposure_phenotype_37.Rdata")
X2 <- X^2
# define Y (=the outcome)
eps_Y <- rnorm(n = n_sample) * c(sqrt(1-var(b_X_Y * X +
b_X2_Y * X2 +
b_XxE_Y * X * E)))
Y <- b_X_Y * X +
b_X2_Y * X2 +
b_XxE_Y * E * X +
eps_Y
sex <- sample(x = c(0, 1),
size = n_sample,
prob = c(0.5, 0.5),
replace = T)
age <- rnorm(n_sample)
outcome_df <- data.frame(eid = c(1:n_sample),
'11-0.0' = Y,
sex = sex,
age_exact = age,
age_exact2 = age^2,
age_exact_x_sex = age*sex,
'11_z' = Y,
'11_z_c' = Y,
'11_IRNT' = Y,
check.names = F)
save(x = outcome_df, file = "005_outcome_phenotype_11.Rdata")
interaction_df <- data.frame(eid = c(1:n_sample),
'1204-0.0' = E,
'1204_z' = E,
'1204_z_c' = E,
'1204_c' = E,
check.names = F)
save(x = interaction_df, file = "006_interaction_phenotype_1204.Rdata")
df_gen_score <- data.frame(eid = c(1:n_sample),
GRS_37 = G)
save(x = df_gen_score, file = "010_individual_GRS_37.Rdata")
# get GRS on Exposure model (for causal effects)
Y <- "37_IRNT_c"
GRS_on_pheno_model <- lm(pheno_df[,Y] ~ df_gen_score[,"GRS_37"]) |> summary()
save(GRS_on_pheno_model, file = "010_Model_GRS_on_pheno_37.Rdata")
# brilliantly, the covariates df is called "X"
X <- data.frame(eid = c(1:n_sample),
sex = sex,
age = age,
age_exact = age,
age_exact2 = age^2,
age_exact_x_sex = age*sex)
PCs <- matrix(data = rnorm(40*n_sample), nrow = n_sample, ncol = 40)
colnames(PCs) <- paste0("PC", c(1:40))
PCs <- as.data.frame(PCs)
X <- cbind(X, PCs)
save(x = X, file = "003_Covariates.Rdata")
medication_df <- data.frame(eid = c(1:n_sample),
chol_inhibit = sample(x = c(0, 1),
size = n_sample,
prob = c(0.8, 0.2),
replace = T),
bp_regul = sample(x = c(0, 1),
size = n_sample,
prob = c(0.8, 0.2),
replace = T),
Insulin = sample(x = c(0, 1),
size = n_sample,
prob = c(0.95, 0.05),
replace = T),
hormone_repl = sample(x = c(0, 1),
size = n_sample,
prob = c(0.97, 0.03),
replace = T),
oral_contraceptive = sample(x = c(0, 1),
size = n_sample,
prob = c(0.9, 0.1),
replace = T))
save(x = medication_df, file = "003_Medication.Rdata")
df_PGS <- data.frame(IID = c(1:n_sample),
PGS_37_SUM = G)
library(readr)
library(R.utils)
write_delim(x = df_PGS, file = "../data/aggregated_scores.txt", delim = "\t")
gzip("../data/aggregated_scores.txt")
write_delim(x = df_PGS, file = "../data/aggregated_scores.txt", delim = "\t")
gzip("../data/aggregated_scores.txt")
write_delim(x = df_PGS, file = "../data/aggregated_scores.txt", delim = "\t")
gzip("../data/aggregated_scores.txt")
